openapi: 3.0.0
info:
  title: PortfolioPro API
  description: Comprehensive API for the PortfolioPro mobile application - a
    professional portfolio showcase platform
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
    description: Development server
paths:
  /auth/register:
    post:
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                name:
                  type: string
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                  token:
                    type: string
        "400":
          description: Invalid input
        "409":
          description: User already exists
  /auth/login:
    post:
      summary: Authenticate user and get token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "200":
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
                  token:
                    type: string
        "400":
          description: Invalid credentials
        "401":
          description: Unauthorized
  /users/{user_id}:
    get:
      summary: Get user profile by ID
      operationId: getUserProfile
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
    patch:
      summary: Update user profile
      operationId: updateUserProfile
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserInput"
      responses:
        "200":
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
        "404":
          description: User not found
  /users/search:
    get:
      summary: Search users
      operationId: searchUsers
      parameters:
        - name: query
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: sort_by
          in: query
          schema:
            type: string
            enum:
              - user_id
              - email
              - name
              - created_at
              - updated_at
            default: created_at
        - name: sort_order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        "200":
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  /users/{user_id}/social-media-links:
    get:
      summary: Get all social media links for a user
      operationId: getUserSocialMediaLinks
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: platform
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: sort_by
          in: query
          schema:
            type: string
            enum:
              - link_id
              - user_id
              - platform
              - display_order
            default: display_order
        - name: sort_order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
      responses:
        "200":
          description: Social media links retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SocialMediaLink"
    post:
      summary: Create a new social media link for a user
      operationId: createUserSocialMediaLink
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSocialMediaLinkInput"
      responses:
        "201":
          description: Social media link created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SocialMediaLink"
        "400":
          description: Invalid input
  /users/{user_id}/social-media-links/{link_id}:
    get:
      summary: Get a specific social media link
      operationId: getSocialMediaLink
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: link_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Social media link retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SocialMediaLink"
        "404":
          description: Social media link not found
    patch:
      summary: Update a social media link
      operationId: updateSocialMediaLink
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: link_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSocialMediaLinkInput"
      responses:
        "200":
          description: Social media link updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SocialMediaLink"
        "400":
          description: Invalid input
        "404":
          description: Social media link not found
    delete:
      summary: Delete a social media link
      operationId: deleteSocialMediaLink
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: link_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Social media link deleted successfully
        "404":
          description: Social media link not found
  /users/{user_id}/skills:
    get:
      summary: Get all skills for a user
      operationId: getUserSkills
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: category
          in: query
          schema:
            type: string
        - name: proficiency_level
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: sort_by
          in: query
          schema:
            type: string
            enum:
              - skill_id
              - user_id
              - name
              - category
              - display_order
            default: display_order
        - name: sort_order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
      responses:
        "200":
          description: Skills retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Skill"
    post:
      summary: Create a new skill for a user
      operationId: createUserSkill
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSkillInput"
      responses:
        "201":
          description: Skill created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Skill"
        "400":
          description: Invalid input
  /users/{user_id}/skills/{skill_id}:
    get:
      summary: Get a specific skill
      operationId: getSkill
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: skill_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Skill retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Skill"
        "404":
          description: Skill not found
    patch:
      summary: Update a skill
      operationId: updateSkill
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: skill_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSkillInput"
      responses:
        "200":
          description: Skill updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Skill"
        "400":
          description: Invalid input
        "404":
          description: Skill not found
    delete:
      summary: Delete a skill
      operationId: deleteSkill
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: skill_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Skill deleted successfully
        "404":
          description: Skill not found
  /users/{user_id}/projects:
    get:
      summary: Get all projects for a user
      operationId: getUserProjects
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: title
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: sort_by
          in: query
          schema:
            type: string
            enum:
              - project_id
              - user_id
              - title
              - display_order
              - created_at
            default: display_order
        - name: sort_order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
      responses:
        "200":
          description: Projects retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
    post:
      summary: Create a new project for a user
      operationId: createUserProject
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProjectInput"
      responses:
        "201":
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "400":
          description: Invalid input
  /users/{user_id}/projects/{project_id}:
    get:
      summary: Get a specific project
      operationId: getProject
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Project retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "404":
          description: Project not found
    patch:
      summary: Update a project
      operationId: updateProject
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProjectInput"
      responses:
        "200":
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "400":
          description: Invalid input
        "404":
          description: Project not found
    delete:
      summary: Delete a project
      operationId: deleteProject
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Project deleted successfully
        "404":
          description: Project not found
  /projects/{project_id}/screenshots:
    get:
      summary: Get all screenshots for a project
      operationId: getProjectScreenshots
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: sort_by
          in: query
          schema:
            type: string
            enum:
              - screenshot_id
              - project_id
              - display_order
            default: display_order
        - name: sort_order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
      responses:
        "200":
          description: Screenshots retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectScreenshot"
    post:
      summary: Create a new screenshot for a project
      operationId: createProjectScreenshot
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProjectScreenshotInput"
      responses:
        "201":
          description: Screenshot created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectScreenshot"
        "400":
          description: Invalid input
  /projects/{project_id}/screenshots/{screenshot_id}:
    get:
      summary: Get a specific screenshot
      operationId: getProjectScreenshot
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: screenshot_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Screenshot retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectScreenshot"
        "404":
          description: Screenshot not found
    patch:
      summary: Update a screenshot
      operationId: updateProjectScreenshot
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: screenshot_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProjectScreenshotInput"
      responses:
        "200":
          description: Screenshot updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectScreenshot"
        "400":
          description: Invalid input
        "404":
          description: Screenshot not found
    delete:
      summary: Delete a screenshot
      operationId: deleteProjectScreenshot
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
        - name: screenshot_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Screenshot deleted successfully
        "404":
          description: Screenshot not found
  /users/{user_id}/experiences:
    get:
      summary: Get all experiences for a user
      operationId: getUserExperiences
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: company_name
          in: query
          schema:
            type: string
        - name: is_current
          in: query
          schema:
            type: boolean
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: sort_by
          in: query
          schema:
            type: string
            enum:
              - experience_id
              - user_id
              - role_title
              - company_name
              - start_date
              - display_order
            default: display_order
        - name: sort_order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        "200":
          description: Experiences retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Experience"
    post:
      summary: Create a new experience for a user
      operationId: createUserExperience
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateExperienceInput"
      responses:
        "201":
          description: Experience created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Experience"
        "400":
          description: Invalid input
  /users/{user_id}/experiences/{experience_id}:
    get:
      summary: Get a specific experience
      operationId: getExperience
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: experience_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Experience retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Experience"
        "404":
          description: Experience not found
    patch:
      summary: Update an experience
      operationId: updateExperience
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: experience_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateExperienceInput"
      responses:
        "200":
          description: Experience updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Experience"
        "400":
          description: Invalid input
        "404":
          description: Experience not found
    delete:
      summary: Delete an experience
      operationId: deleteExperience
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: experience_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Experience deleted successfully
        "404":
          description: Experience not found
  /users/{user_id}/education:
    get:
      summary: Get all education entries for a user
      operationId: getUserEducation
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: institution_name
          in: query
          schema:
            type: string
        - name: degree
          in: query
          schema:
            type: string
        - name: is_current
          in: query
          schema:
            type: boolean
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: sort_by
          in: query
          schema:
            type: string
            enum:
              - education_id
              - user_id
              - institution_name
              - degree
              - start_date
              - display_order
            default: display_order
        - name: sort_order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        "200":
          description: Education entries retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Education"
    post:
      summary: Create a new education entry for a user
      operationId: createUserEducation
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEducationInput"
      responses:
        "201":
          description: Education entry created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Education"
        "400":
          description: Invalid input
  /users/{user_id}/education/{education_id}:
    get:
      summary: Get a specific education entry
      operationId: getEducation
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: education_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Education entry retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Education"
        "404":
          description: Education entry not found
    patch:
      summary: Update an education entry
      operationId: updateEducation
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: education_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEducationInput"
      responses:
        "200":
          description: Education entry updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Education"
        "400":
          description: Invalid input
        "404":
          description: Education entry not found
    delete:
      summary: Delete an education entry
      operationId: deleteEducation
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: education_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Education entry deleted successfully
        "404":
          description: Education entry not found
  /users/{user_id}/key-facts:
    get:
      summary: Get all key facts for a user
      operationId: getUserKeyFacts
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: sort_by
          in: query
          schema:
            type: string
            enum:
              - fact_id
              - user_id
              - display_order
            default: display_order
        - name: sort_order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
      responses:
        "200":
          description: Key facts retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/KeyFact"
    post:
      summary: Create a new key fact for a user
      operationId: createUserKeyFact
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateKeyFactInput"
      responses:
        "201":
          description: Key fact created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyFact"
        "400":
          description: Invalid input
  /users/{user_id}/key-facts/{fact_id}:
    get:
      summary: Get a specific key fact
      operationId: getKeyFact
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: fact_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Key fact retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyFact"
        "404":
          description: Key fact not found
    patch:
      summary: Update a key fact
      operationId: updateKeyFact
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: fact_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateKeyFactInput"
      responses:
        "200":
          description: Key fact updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyFact"
        "400":
          description: Invalid input
        "404":
          description: Key fact not found
    delete:
      summary: Delete a key fact
      operationId: deleteKeyFact
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: fact_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Key fact deleted successfully
        "404":
          description: Key fact not found
  /users/{user_id}/resume-downloads:
    get:
      summary: Get all resume downloads for a user
      operationId: getUserResumeDownloads
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: file_format
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: sort_by
          in: query
          schema:
            type: string
            enum:
              - download_id
              - user_id
              - file_format
              - created_at
            default: created_at
        - name: sort_order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        "200":
          description: Resume downloads retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResumeDownload"
    post:
      summary: Create a new resume download for a user
      operationId: createUserResumeDownload
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateResumeDownloadInput"
      responses:
        "201":
          description: Resume download created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResumeDownload"
        "400":
          description: Invalid input
  /users/{user_id}/resume-downloads/{download_id}:
    get:
      summary: Get a specific resume download
      operationId: getResumeDownload
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: download_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Resume download retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResumeDownload"
        "404":
          description: Resume download not found
    patch:
      summary: Update a resume download
      operationId: updateResumeDownload
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: download_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateResumeDownloadInput"
      responses:
        "200":
          description: Resume download updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResumeDownload"
        "400":
          description: Invalid input
        "404":
          description: Resume download not found
    delete:
      summary: Delete a resume download
      operationId: deleteResumeDownload
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: download_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Resume download deleted successfully
        "404":
          description: Resume download not found
  /users/{user_id}/contact-messages:
    get:
      summary: Get all contact messages for a user
      operationId: getUserContactMessages
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: sender_email
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: sort_by
          in: query
          schema:
            type: string
            enum:
              - message_id
              - user_id
              - sender_email
              - sent_at
              - status
            default: sent_at
        - name: sort_order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        "200":
          description: Contact messages retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContactMessage"
    post:
      summary: Create a new contact message for a user
      operationId: createUserContactMessage
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateContactMessageInput"
      responses:
        "201":
          description: Contact message created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactMessage"
        "400":
          description: Invalid input
  /users/{user_id}/contact-messages/{message_id}:
    get:
      summary: Get a specific contact message
      operationId: getContactMessage
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: message_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Contact message retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactMessage"
        "404":
          description: Contact message not found
    patch:
      summary: Update a contact message
      operationId: updateContactMessage
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: message_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateContactMessageInput"
      responses:
        "200":
          description: Contact message updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactMessage"
        "400":
          description: Invalid input
        "404":
          description: Contact message not found
    delete:
      summary: Delete a contact message
      operationId: deleteContactMessage
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: message_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Contact message deleted successfully
        "404":
          description: Contact message not found
  /users/{user_id}/app-settings:
    get:
      summary: Get all app settings for a user
      operationId: getUserAppSettings
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: theme_mode
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: sort_by
          in: query
          schema:
            type: string
            enum:
              - setting_id
              - user_id
              - theme_mode
              - updated_at
            default: updated_at
        - name: sort_order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        "200":
          description: App settings retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AppSetting"
    post:
      summary: Create new app settings for a user
      operationId: createUserAppSettings
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAppSettingInput"
      responses:
        "201":
          description: App settings created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppSetting"
        "400":
          description: Invalid input
  /users/{user_id}/app-settings/{setting_id}:
    get:
      summary: Get specific app settings
      operationId: getAppSettings
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: setting_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: App settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppSetting"
        "404":
          description: App settings not found
    patch:
      summary: Update app settings
      operationId: updateAppSettings
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: setting_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAppSettingInput"
      responses:
        "200":
          description: App settings updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppSetting"
        "400":
          description: Invalid input
        "404":
          description: App settings not found
    delete:
      summary: Delete app settings
      operationId: deleteAppSettings
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: setting_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: App settings deleted successfully
        "404":
          description: App settings not found
  /users/{user_id}/navigation-preferences:
    get:
      summary: Get all navigation preferences for a user
      operationId: getUserNavigationPreferences
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: sort_by
          in: query
          schema:
            type: string
            enum:
              - preference_id
              - user_id
              - updated_at
            default: updated_at
        - name: sort_order
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        "200":
          description: Navigation preferences retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NavigationPreference"
    post:
      summary: Create new navigation preferences for a user
      operationId: createUserNavigationPreferences
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateNavigationPreferenceInput"
      responses:
        "201":
          description: Navigation preferences created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NavigationPreference"
        "400":
          description: Invalid input
  /users/{user_id}/navigation-preferences/{preference_id}:
    get:
      summary: Get specific navigation preferences
      operationId: getNavigationPreferences
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: preference_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Navigation preferences retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NavigationPreference"
        "404":
          description: Navigation preferences not found
    patch:
      summary: Update navigation preferences
      operationId: updateNavigationPreferences
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: preference_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateNavigationPreferenceInput"
      responses:
        "200":
          description: Navigation preferences updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NavigationPreference"
        "400":
          description: Invalid input
        "404":
          description: Navigation preferences not found
    delete:
      summary: Delete navigation preferences
      operationId: deleteNavigationPreferences
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: preference_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Navigation preferences deleted successfully
        "404":
          description: Navigation preferences not found
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: string
        email:
          type: string
          format: email
        password_hash:
          type: string
        name:
          type: string
        tagline:
          type: string
          nullable: true
        bio_text:
          type: string
          nullable: true
        header_image_url:
          type: string
          nullable: true
        avatar_url:
          type: string
          nullable: true
        video_embed_url:
          type: string
          nullable: true
        created_at:
          type: string
        updated_at:
          type: string
      required:
        - user_id
        - email
        - password_hash
        - name
        - created_at
        - updated_at
    CreateUserInput:
      type: object
      properties:
        user_id:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        password_hash:
          type: string
          minLength: 1
          maxLength: 255
        name:
          type: string
          minLength: 1
          maxLength: 255
        tagline:
          type: string
          nullable: true
        bio_text:
          type: string
          nullable: true
        header_image_url:
          type: string
          format: uri
          nullable: true
        avatar_url:
          type: string
          format: uri
          nullable: true
        video_embed_url:
          type: string
          format: uri
          nullable: true
      required:
        - user_id
        - email
        - password_hash
        - name
    UpdateUserInput:
      type: object
      properties:
        user_id:
          type: string
        email:
          type: string
          format: email
          maxLength: 255
        password_hash:
          type: string
          minLength: 1
          maxLength: 255
        name:
          type: string
          minLength: 1
          maxLength: 255
        tagline:
          type: string
          nullable: true
        bio_text:
          type: string
          nullable: true
        header_image_url:
          type: string
          format: uri
          nullable: true
        avatar_url:
          type: string
          format: uri
          nullable: true
        video_embed_url:
          type: string
          format: uri
          nullable: true
      required:
        - user_id
    SocialMediaLink:
      type: object
      properties:
        link_id:
          type: string
        user_id:
          type: string
        platform:
          type: string
        url:
          type: string
        display_order:
          type: integer
      required:
        - link_id
        - user_id
        - platform
        - url
        - display_order
    CreateSocialMediaLinkInput:
      type: object
      properties:
        link_id:
          type: string
          minLength: 1
          maxLength: 255
        user_id:
          type: string
          minLength: 1
          maxLength: 255
        platform:
          type: string
          minLength: 1
          maxLength: 255
        url:
          type: string
          format: uri
        display_order:
          type: integer
          default: 0
      required:
        - link_id
        - user_id
        - platform
        - url
    UpdateSocialMediaLinkInput:
      type: object
      properties:
        link_id:
          type: string
        user_id:
          type: string
          minLength: 1
          maxLength: 255
        platform:
          type: string
          minLength: 1
          maxLength: 255
        url:
          type: string
          format: uri
        display_order:
          type: integer
      required:
        - link_id
    Skill:
      type: object
      properties:
        skill_id:
          type: string
        user_id:
          type: string
        name:
          type: string
        category:
          type: string
          nullable: true
        proficiency_level:
          type: string
          nullable: true
        icon_url:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        display_order:
          type: integer
      required:
        - skill_id
        - user_id
        - name
        - display_order
    CreateSkillInput:
      type: object
      properties:
        skill_id:
          type: string
          minLength: 1
          maxLength: 255
        user_id:
          type: string
          minLength: 1
          maxLength: 255
        name:
          type: string
          minLength: 1
          maxLength: 255
        category:
          type: string
          maxLength: 255
          nullable: true
        proficiency_level:
          type: string
          maxLength: 255
          nullable: true
        icon_url:
          type: string
          format: uri
          nullable: true
        description:
          type: string
          nullable: true
        display_order:
          type: integer
          default: 0
      required:
        - skill_id
        - user_id
        - name
    UpdateSkillInput:
      type: object
      properties:
        skill_id:
          type: string
        user_id:
          type: string
          minLength: 1
          maxLength: 255
        name:
          type: string
          minLength: 1
          maxLength: 255
        category:
          type: string
          maxLength: 255
          nullable: true
        proficiency_level:
          type: string
          maxLength: 255
          nullable: true
        icon_url:
          type: string
          format: uri
          nullable: true
        description:
          type: string
          nullable: true
        display_order:
          type: integer
      required:
        - skill_id
    Project:
      type: object
      properties:
        project_id:
          type: string
        user_id:
          type: string
        title:
          type: string
        short_description:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        thumbnail_url:
          type: string
          nullable: true
        project_url:
          type: string
          nullable: true
        source_code_url:
          type: string
          nullable: true
        tech_stack:
          type: string
          nullable: true
        display_order:
          type: integer
        created_at:
          type: string
        updated_at:
          type: string
      required:
        - project_id
        - user_id
        - title
        - display_order
        - created_at
        - updated_at
    CreateProjectInput:
      type: object
      properties:
        project_id:
          type: string
          minLength: 1
          maxLength: 255
        user_id:
          type: string
          minLength: 1
          maxLength: 255
        title:
          type: string
          minLength: 1
          maxLength: 255
        short_description:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        thumbnail_url:
          type: string
          format: uri
          nullable: true
        project_url:
          type: string
          format: uri
          nullable: true
        source_code_url:
          type: string
          format: uri
          nullable: true
        tech_stack:
          type: string
          nullable: true
        display_order:
          type: integer
          default: 0
      required:
        - project_id
        - user_id
        - title
    UpdateProjectInput:
      type: object
      properties:
        project_id:
          type: string
        user_id:
          type: string
          minLength: 1
          maxLength: 255
        title:
          type: string
          minLength: 1
          maxLength: 255
        short_description:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        thumbnail_url:
          type: string
          format: uri
          nullable: true
        project_url:
          type: string
          format: uri
          nullable: true
        source_code_url:
          type: string
          format: uri
          nullable: true
        tech_stack:
          type: string
          nullable: true
        display_order:
          type: integer
      required:
        - project_id
    ProjectScreenshot:
      type: object
      properties:
        screenshot_id:
          type: string
        project_id:
          type: string
        image_url:
          type: string
        caption:
          type: string
          nullable: true
        display_order:
          type: integer
      required:
        - screenshot_id
        - project_id
        - image_url
        - display_order
    CreateProjectScreenshotInput:
      type: object
      properties:
        screenshot_id:
          type: string
          minLength: 1
          maxLength: 255
        project_id:
          type: string
          minLength: 1
          maxLength: 255
        image_url:
          type: string
          format: uri
        caption:
          type: string
          nullable: true
        display_order:
          type: integer
          default: 0
      required:
        - screenshot_id
        - project_id
        - image_url
    UpdateProjectScreenshotInput:
      type: object
      properties:
        screenshot_id:
          type: string
        project_id:
          type: string
          minLength: 1
          maxLength: 255
        image_url:
          type: string
          format: uri
        caption:
          type: string
          nullable: true
        display_order:
          type: integer
      required:
        - screenshot_id
    Experience:
      type: object
      properties:
        experience_id:
          type: string
        user_id:
          type: string
        role_title:
          type: string
        company_name:
          type: string
        company_logo_url:
          type: string
          nullable: true
        start_date:
          type: string
        end_date:
          type: string
          nullable: true
        is_current:
          type: boolean
        location:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        display_order:
          type: integer
      required:
        - experience_id
        - user_id
        - role_title
        - company_name
        - start_date
        - is_current
        - display_order
    CreateExperienceInput:
      type: object
      properties:
        experience_id:
          type: string
          minLength: 1
          maxLength: 255
        user_id:
          type: string
          minLength: 1
          maxLength: 255
        role_title:
          type: string
          minLength: 1
          maxLength: 255
        company_name:
          type: string
          minLength: 1
          maxLength: 255
        company_logo_url:
          type: string
          format: uri
          nullable: true
        start_date:
          type: string
        end_date:
          type: string
          nullable: true
        is_current:
          type: boolean
          default: false
        location:
          type: string
          maxLength: 255
          nullable: true
        description:
          type: string
          nullable: true
        display_order:
          type: integer
          default: 0
      required:
        - experience_id
        - user_id
        - role_title
        - company_name
        - start_date
    UpdateExperienceInput:
      type: object
      properties:
        experience_id:
          type: string
        user_id:
          type: string
          minLength: 1
          maxLength: 255
        role_title:
          type: string
          minLength: 1
          maxLength: 255
        company_name:
          type: string
          minLength: 1
          maxLength: 255
        company_logo_url:
          type: string
          format: uri
          nullable: true
        start_date:
          type: string
        end_date:
          type: string
          nullable: true
        is_current:
          type: boolean
        location:
          type: string
          maxLength: 255
          nullable: true
        description:
          type: string
          nullable: true
        display_order:
          type: integer
      required:
        - experience_id
    Education:
      type: object
      properties:
        education_id:
          type: string
        user_id:
          type: string
        institution_name:
          type: string
        degree:
          type: string
          nullable: true
        institution_logo_url:
          type: string
          nullable: true
        start_date:
          type: string
        end_date:
          type: string
          nullable: true
        is_current:
          type: boolean
        location:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        display_order:
          type: integer
      required:
        - education_id
        - user_id
        - institution_name
        - start_date
        - is_current
        - display_order
    CreateEducationInput:
      type: object
      properties:
        education_id:
          type: string
          minLength: 1
          maxLength: 255
        user_id:
          type: string
          minLength: 1
          maxLength: 255
        institution_name:
          type: string
          minLength: 1
          maxLength: 255
        degree:
          type: string
          maxLength: 255
          nullable: true
        institution_logo_url:
          type: string
          format: uri
          nullable: true
        start_date:
          type: string
        end_date:
          type: string
          nullable: true
        is_current:
          type: boolean
          default: false
        location:
          type: string
          maxLength: 255
          nullable: true
        description:
          type: string
          nullable: true
        display_order:
          type: integer
          default: 0
      required:
        - education_id
        - user_id
        - institution_name
        - start_date
    UpdateEducationInput:
      type: object
      properties:
        education_id:
          type: string
        user_id:
          type: string
          minLength: 1
          maxLength: 255
        institution_name:
          type: string
          minLength: 1
          maxLength: 255
        degree:
          type: string
          maxLength: 255
          nullable: true
        institution_logo_url:
          type: string
          format: uri
          nullable: true
        start_date:
          type: string
        end_date:
          type: string
          nullable: true
        is_current:
          type: boolean
        location:
          type: string
          maxLength: 255
          nullable: true
        description:
          type: string
          nullable: true
        display_order:
          type: integer
      required:
        - education_id
    KeyFact:
      type: object
      properties:
        fact_id:
          type: string
        user_id:
          type: string
        content:
          type: string
        display_order:
          type: integer
      required:
        - fact_id
        - user_id
        - content
        - display_order
    CreateKeyFactInput:
      type: object
      properties:
        fact_id:
          type: string
          minLength: 1
          maxLength: 255
        user_id:
          type: string
          minLength: 1
          maxLength: 255
        content:
          type: string
          minLength: 1
        display_order:
          type: integer
          default: 0
      required:
        - fact_id
        - user_id
        - content
    UpdateKeyFactInput:
      type: object
      properties:
        fact_id:
          type: string
        user_id:
          type: string
          minLength: 1
          maxLength: 255
        content:
          type: string
          minLength: 1
        display_order:
          type: integer
      required:
        - fact_id
    ResumeDownload:
      type: object
      properties:
        download_id:
          type: string
        user_id:
          type: string
        file_format:
          type: string
        download_url:
          type: string
        created_at:
          type: string
      required:
        - download_id
        - user_id
        - file_format
        - download_url
        - created_at
    CreateResumeDownloadInput:
      type: object
      properties:
        download_id:
          type: string
          minLength: 1
          maxLength: 255
        user_id:
          type: string
          minLength: 1
          maxLength: 255
        file_format:
          type: string
          minLength: 1
          maxLength: 50
        download_url:
          type: string
          format: uri
        created_at:
          type: string
      required:
        - download_id
        - user_id
        - file_format
        - download_url
        - created_at
    UpdateResumeDownloadInput:
      type: object
      properties:
        download_id:
          type: string
        user_id:
          type: string
          minLength: 1
          maxLength: 255
        file_format:
          type: string
          minLength: 1
          maxLength: 50
        download_url:
          type: string
          format: uri
      required:
        - download_id
    ContactMessage:
      type: object
      properties:
        message_id:
          type: string
        user_id:
          type: string
        sender_name:
          type: string
        sender_email:
          type: string
        sender_phone:
          type: string
          nullable: true
        message_content:
          type: string
        sent_at:
          type: string
        status:
          type: string
      required:
        - message_id
        - user_id
        - sender_name
        - sender_email
        - message_content
        - sent_at
        - status
    CreateContactMessageInput:
      type: object
      properties:
        message_id:
          type: string
          minLength: 1
          maxLength: 255
        user_id:
          type: string
          minLength: 1
          maxLength: 255
        sender_name:
          type: string
          minLength: 1
          maxLength: 255
        sender_email:
          type: string
          format: email
          maxLength: 255
        sender_phone:
          type: string
          maxLength: 50
          nullable: true
        message_content:
          type: string
          minLength: 1
        sent_at:
          type: string
        status:
          type: string
          minLength: 1
          maxLength: 50
          default: pending
      required:
        - message_id
        - user_id
        - sender_name
        - sender_email
        - message_content
        - sent_at
    UpdateContactMessageInput:
      type: object
      properties:
        message_id:
          type: string
        user_id:
          type: string
          minLength: 1
          maxLength: 255
        sender_name:
          type: string
          minLength: 1
          maxLength: 255
        sender_email:
          type: string
          format: email
          maxLength: 255
        sender_phone:
          type: string
          maxLength: 50
          nullable: true
        message_content:
          type: string
          minLength: 1
        sent_at:
          type: string
        status:
          type: string
          minLength: 1
          maxLength: 50
      required:
        - message_id
    AppSetting:
      type: object
      properties:
        setting_id:
          type: string
        user_id:
          type: string
        theme_mode:
          type: string
        font_scale:
          type: number
        hidden_sections:
          type: string
          nullable: true
        updated_at:
          type: string
      required:
        - setting_id
        - user_id
        - theme_mode
        - font_scale
        - updated_at
    CreateAppSettingInput:
      type: object
      properties:
        setting_id:
          type: string
          minLength: 1
          maxLength: 255
        user_id:
          type: string
          minLength: 1
          maxLength: 255
        theme_mode:
          type: string
          minLength: 1
          maxLength: 50
          default: light
        font_scale:
          type: number
          default: 1
        hidden_sections:
          type: string
          nullable: true
        updated_at:
          type: string
      required:
        - setting_id
        - user_id
        - theme_mode
        - font_scale
        - updated_at
    UpdateAppSettingInput:
      type: object
      properties:
        setting_id:
          type: string
        user_id:
          type: string
          minLength: 1
          maxLength: 255
        theme_mode:
          type: string
          minLength: 1
          maxLength: 50
        font_scale:
          type: number
        hidden_sections:
          type: string
          nullable: true
        updated_at:
          type: string
      required:
        - setting_id
    NavigationPreference:
      type: object
      properties:
        preference_id:
          type: string
        user_id:
          type: string
        hidden_tabs:
          type: string
          nullable: true
        updated_at:
          type: string
      required:
        - preference_id
        - user_id
        - updated_at
    CreateNavigationPreferenceInput:
      type: object
      properties:
        preference_id:
          type: string
          minLength: 1
          maxLength: 255
        user_id:
          type: string
          minLength: 1
          maxLength: 255
        hidden_tabs:
          type: string
          nullable: true
        updated_at:
          type: string
      required:
        - preference_id
        - user_id
        - updated_at
    UpdateNavigationPreferenceInput:
      type: object
      properties:
        preference_id:
          type: string
        user_id:
          type: string
          minLength: 1
          maxLength: 255
        hidden_tabs:
          type: string
          nullable: true
        updated_at:
          type: string
      required:
        - preference_id
security:
  - bearerAuth: []
